Call $.val() on inputs to get the string value of your user's input
  - Good!
Store user input in var city
  - Good!
Use $.on("submit") or $.click to figure out when the user clicks the "submit" button
  - Good!
Create if / else if / else conditionals to control the flow of your application
  - Good!
Prevent a form submission using the event.preventDefault() function
  - Good!
Use the $.ready() handler to delay your code from executing until all DOM assets have been loaded
  - Good!
Use the || operator in your conditionals to allow for multiple string values to execute if/else if statement code
  - Good!



Additional Comments:

This looks great! All your JavaScript is working! And good use of pseudocode.

To answer your question about other search options, one thing you can do is use toLowerCase() to get rid of all the variation in caps. 
  city = city.toLowerCase();
(This wasn't necessary in the homework or anything.)

On line 5, I see you have the code to reset the text once you've clicked the submit button. It's not working though, but it's just because your selector is wrong. It should be #city-type. Then when you click submit, the text in the input will disappear (so you don't have to erase it to write a new city name.)
 $('#city-input').val('');

 The only other thing is that it's better to use === in the conditional (instead of ==). === is more exact than ==, which sometimes gives you weird results. For instance:
  3 == "3"    is true (even though "3" is a string, not a number) but
  3 === "3"   is false like you'd expect
Basically, unless you have a specific reason to use ==, it's better to use ===.

Overall, great job! Let me know if you have any questions.